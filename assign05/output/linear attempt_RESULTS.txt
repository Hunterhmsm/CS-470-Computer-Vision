****************************************
APPROACHES: 
****************************************

* linear attempt
	 Apply conv and linear transformations

****************************************
RESULTS:
****************************************
APPROACH	TRAINING_accuracy	TRAINING_f1	TESTING_accuracy	TESTING_f1
linear attempt	0.7737	0.7744	0.7046	0.7045

****************************************
MODEL ARCHITECTURES:
****************************************
* linear attempt
Linear_Attempt(
  (net_stack): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
    (1): ReLU()
    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
    (3): ReLU()
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
    (6): ReLU()
    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): Flatten(start_dim=1, end_dim=-1)
    (9): Linear(in_features=4096, out_features=32, bias=True)
    (10): ReLU()
    (11): Linear(in_features=32, out_features=16, bias=True)
    (12): ReLU()
    (13): Linear(in_features=16, out_features=10, bias=True)
  )
)

